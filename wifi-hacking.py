###########################################################################
# AUTHOR  : AKASH BLACK HAT                                               #
# WHATSAPP: +91 8389020949                                                #
# HACKING GROUP :https://www.facebook.com/AKASHBLACKHAT                   #
# YOUTUBE : TECHNICAL AKASH SKILLS                                        #
###########################################################################
import marshal,base64
exec (base64.b64decode(""))